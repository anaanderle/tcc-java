
DROP TABLE IF EXISTS usuario CASCADE;
CREATE TABLE IF NOT EXISTS usuario(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    apelido VARCHAR(50),
    data_nascimento DATE NOT NULL,
    senha VARCHAR(128) NOT NULL,
    imagem_url VARCHAR(512),
    ativo BOOLEAN,

    CONSTRAINT pk_usuario PRIMARY KEY (id),
    CONSTRAINT uk_usuario_email UNIQUE (email)
);

DROP TABLE IF EXISTS permissao CASCADE;
CREATE TABLE IF NOT EXISTS permissao(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nome VARCHAR(100) NOT NULL,
    usuario_id BIGINT NOT NULL,

    CONSTRAINT pk_permissao PRIMARY KEY (id),
    CONSTRAINT uk_permissao UNIQUE (nome, usuario_id)
);

DROP TABLE IF EXISTS post CASCADE;
CREATE TABLE IF NOT EXISTS post(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    usuario_id BIGINT NOT NULL,
    imagem_url VARCHAR(512),
    descricao VARCHAR(255) NOT NULL,
    situacao VARCHAR(7) NOT NULL,
    data_postagem DATE NOT NULL,

    CONSTRAINT pk_post PRIMARY KEY (id),
    CONSTRAINT ck_situacao CHECK (situacao IN ('PUBLICO', 'PRIVADO'))
);

DROP TABLE IF EXISTS curtida CASCADE;
CREATE TABLE IF NOT EXISTS curtida(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    post_id BIGINT NOT NULL,
    usuario_id BIGINT NOT NULL,
	
    CONSTRAINT pk_curtida PRIMARY KEY (id)
);

DROP TABLE IF EXISTS comentario CASCADE;
CREATE TABLE IF NOT EXISTS comentario(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    post_id BIGINT NOT NULL,
    usuario_id BIGINT NOT NULL,
    descricao VARCHAR(128) NOT NULL,

    CONSTRAINT pk_comentario PRIMARY KEY (id),
    CONSTRAINT fk_comentario_post FOREIGN KEY (post_id) REFERENCES post (id),
    CONSTRAINT fk_comentario_usuario FOREIGN KEY (usuario_id) REFERENCES usuario (id)
);

DROP TABLE IF EXISTS amizade CASCADE;
CREATE TABLE IF NOT EXISTS amizade(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    usuario_id BIGINT NOT NULL,
    amigo_id BIGINT NOT NULL,
    situacao VARCHAR(12) NOT NULL,

    CONSTRAINT pk_amizade PRIMARY KEY (id),
    CONSTRAINT fk_amizade_amigo FOREIGN KEY (amigo_id) REFERENCES usuario (id),
    CONSTRAINT fk_amizade_usuario FOREIGN KEY (usuario_id) REFERENCES usuario (id),
    CONSTRAINT ck_situacao CHECK (situacao IN ('SOLICITADA', 'ATIVA'))
);